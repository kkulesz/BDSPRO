<clickhouse>
    <logger>
        <level>trace</level>
        <log>/var/log/clickhouse-server/clickhouse-server.log</log>
        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>
        <!-- Rotation policy
             See https://github.com/pocoproject/poco/blob/poco-1.9.4-release/Foundation/include/Poco/FileChannel.h#L54-L85
          -->
        <size>1000M</size>
        <count>10</count>

    </logger>

    <http_port>8123</http_port>

    <!-- Port for interaction by native protocol with:
         - clickhouse-client and other native ClickHouse tools (clickhouse-benchmark, clickhouse-copier);
         - clickhouse-server with other clickhouse-servers for distributed query processing;
         - ClickHouse drivers and applications supporting native protocol
         (this protocol is also informally called as "the TCP protocol");
         See also 'tcp_port_secure' for secure connections.
    -->
    <tcp_port>9000</tcp_port>

    <!-- Compatibility with MySQL protocol.
         ClickHouse will pretend to be MySQL for applications connecting to this port.
    -->
    <mysql_port>9004</mysql_port>

    <!-- Compatibility with PostgreSQL protocol.
         ClickHouse will pretend to be PostgreSQL for applications connecting to this port.
    -->
    <postgresql_port>9005</postgresql_port>

    <!-- Port for communication between replicas. Used for data exchange.
         It provides low-level data access between servers.
         This port should not be accessible from untrusted networks.
         See also 'interserver_http_credentials'.
         Data transferred over connections to this port should not go through untrusted networks.
         See also 'interserver_https_port'.
      -->
    <interserver_http_port>9009</interserver_http_port>

    <!-- Port for communication between replicas with TLS.
         You have to configure certificate to enable this interface.
         See the openSSL section below.
         See also 'interserver_http_credentials'.
      -->
    <!-- <interserver_https_port>9010</interserver_https_port> -->

    <!-- Hostname that is used by other replicas to request this server.
         If not specified, then it is determined analogous to 'hostname -f' command.
         This setting could be used to switch replication to another network interface
         (the server may be connected to multiple networks via multiple addresses)
      -->


    <!--
        <interserver_http_host>example.clickhouse.com</interserver_http_host>
    -->

    <!-- You can specify credentials for authenthication between replicas.
         This is required when interserver_https_port is accessible from untrusted networks,
         and also recommended to avoid SSRF attacks from possibly compromised services in your network.
      -->
    <!--<interserver_http_credentials>
        <user>interserver</user>
        <password></password>
    </interserver_http_credentials>-->

    <!-- Listen specified address.
         Use :: (wildcard IPv6 address), if you want to accept connections both with IPv4 and IPv6 from everywhere.
         Notes:
         If you open connections from wildcard address, make sure that at least one of the following measures applied:
         - server is protected by firewall and not accessible from untrusted networks;
         - all users are restricted to subset of network addresses (see users.xml);
         - all users have strong passwords, only secure (TLS) interfaces are accessible, or connections are only made via TLS interfaces.
         - users without password have readonly access.
         See also: https://www.shodan.io/search?query=clickhouse
      -->
    <listen_host>::</listen_host>


    <!-- Same for hosts without support for IPv6: -->
    <!-- <listen_host>0.0.0.0</listen_host> -->

    <!-- Default values - try listen localhost on IPv4 and IPv6. -->
    <!--
    <listen_host>::1</listen_host>
    <listen_host>127.0.0.1</listen_host>
    -->

    <interserver_listen_host>::</interserver_listen_host>
    <!-- Listen host for communication between replicas. Used for data exchange -->
    <!-- Default values - equal to listen_host -->

    <!-- Don't exit if IPv6 or IPv4 networks are unavailable while trying to listen. -->
    <!-- <listen_try>0</listen_try> -->

    <!-- Allow multiple servers to listen on the same address:port. This is not recommended.
      -->
    <!-- <listen_reuse_port>0</listen_reuse_port> -->

    <!-- <listen_backlog>4096</listen_backlog> -->

    <max_connections>4096</max_connections>

    <!-- For 'Connection: keep-alive' in HTTP 1.1 -->
    <keep_alive_timeout>3</keep_alive_timeout>

    <!-- gRPC protocol (see src/Server/grpc_protos/clickhouse_grpc.proto for the API) -->
    <!-- <grpc_port>9100</grpc_port> -->
    <grpc>
        <enable_ssl>false</enable_ssl>

        <!-- The following two files are used only if enable_ssl=1 -->
        <ssl_cert_file>/path/to/ssl_cert_file</ssl_cert_file>
        <ssl_key_file>/path/to/ssl_key_file</ssl_key_file>

        <!-- Whether server will request client for a certificate -->
        <ssl_require_client_auth>false</ssl_require_client_auth>

        <!-- The following file is used only if ssl_require_client_auth=1 -->
        <ssl_ca_cert_file>/path/to/ssl_ca_cert_file</ssl_ca_cert_file>

        <!-- Default transport compression type (can be overridden by client, see the transport_compression_type field in QueryInfo).
             Supported algorithms: none, deflate, gzip, stream_gzip -->
        <transport_compression_type>none</transport_compression_type>

        <!-- Default transport compression level. Supported levels: 0..3 -->
        <transport_compression_level>0</transport_compression_level>

        <!-- Send/receive message size limits in bytes. -1 means unlimited -->
        <max_send_message_size>-1</max_send_message_size>
        <max_receive_message_size>-1</max_receive_message_size>

        <!-- Enable if you want very detailed logs -->
        <verbose_logs>false</verbose_logs>
    </grpc>

    <!-- Used with https_port and tcp_port_secure. Full ssl options list: https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->
    <openSSL>
        <server> <!-- Used for https server AND secure tcp port -->
            <!-- openssl req -subj "/CN=localhost" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -->
            <!-- <certificateFile>/etc/clickhouse-server/server.crt</certificateFile>
            <privateKeyFile>/etc/clickhouse-server/server.key</privateKeyFile> -->
            <!-- dhparams are optional. You can delete the <dhParamsFile> element.
                 To generate dhparams, use the following command:
                  openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096
                 Only file format with BEGIN DH PARAMETERS is supported.
              -->
            <!-- <dhParamsFile>/etc/clickhouse-server/dhparam.pem</dhParamsFile>-->
            <verificationMode>none</verificationMode>
            <loadDefaultCAFile>true</loadDefaultCAFile>
            <cacheSessions>true</cacheSessions>
            <disableProtocols>sslv2,sslv3</disableProtocols>
            <preferServerCiphers>true</preferServerCiphers>

            <invalidCertificateHandler>
                <!-- The server, in contrast to the client, cannot ask about the certificate interactively.
                     The only reasonable option is to reject.
                -->
                <name>RejectCertificateHandler</name>
            </invalidCertificateHandler>
        </server>

        <client> <!-- Used for connecting to https dictionary source and secured Zookeeper communication -->
            <loadDefaultCAFile>true</loadDefaultCAFile>
            <cacheSessions>true</cacheSessions>
            <disableProtocols>sslv2,sslv3</disableProtocols>
            <preferServerCiphers>true</preferServerCiphers>
            <!-- Use for self-signed: <verificationMode>none</verificationMode> -->
            <invalidCertificateHandler>
                <!-- Use for self-signed: <name>AcceptCertificateHandler</name> -->
                <name>RejectCertificateHandler</name>
            </invalidCertificateHandler>
        </client>
    </openSSL>

    <!-- Default root page on http[s] server. For example load UI from https://tabix.io/ when opening http://localhost:8123 -->
    <!--
    <http_server_default_response><![CDATA[<html ng-app="SMI2"><head><base href="http://ui.tabix.io/"></head><body><div ui-view="" class="content-ui"></div><script src="http://loader.tabix.io/master.js"></script></body></html>]]></http_server_default_response>
    -->

    <!-- The maximum number of query processing threads, excluding threads for retrieving data from remote servers, allowed to run all queries.
         This is not a hard limit. In case if the limit is reached the query will still get at least one thread to run.
         Query can upscale to desired number of threads during execution if more threads become available.
    -->
    <concurrent_threads_soft_limit_num>0</concurrent_threads_soft_limit_num>
    <concurrent_threads_soft_limit_ratio_to_cores>0</concurrent_threads_soft_limit_ratio_to_cores>

    <!-- Maximum number of concurrent queries. -->
    <max_concurrent_queries>100</max_concurrent_queries>

    <!-- Maximum memory usage (resident set size) for server process.
         Zero value or unset means default. Default is "max_server_memory_usage_to_ram_ratio" of available physical RAM.
         If the value is larger than "max_server_memory_usage_to_ram_ratio" of available physical RAM, it will be cut down.

         The constraint is checked on query execution time.
         If a query tries to allocate memory and the current memory usage plus allocation is greater
          than specified threshold, exception will be thrown.

         It is not practical to set this constraint to small values like just a few gigabytes,
          because memory allocator will keep this amount of memory in caches and the server will deny service of queries.
      -->
    <max_server_memory_usage>0</max_server_memory_usage>

    <!-- Maximum number of threads in the Global thread pool.
    This will default to a maximum of 10000 threads if not specified.
    This setting will be useful in scenarios where there are a large number
    of distributed queries that are running concurrently but are idling most
    of the time, in which case a higher number of threads might be required.
    -->

    <max_thread_pool_size>10000</max_thread_pool_size>

    <!-- On memory constrained environments you may have to set this to value larger than 1.
      -->
    <max_server_memory_usage_to_ram_ratio>0.9</max_server_memory_usage_to_ram_ratio>

    <!-- Simple server-wide memory profiler. Collect a stack trace at every peak allocation step (in bytes).
         Data will be stored in system.trace_log table with query_id = empty string.
         Zero means disabled.
      -->
    <total_memory_profiler_step>4194304</total_memory_profiler_step>

    <!-- Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type.
         The probability is for every alloc/free regardless to the size of the allocation.
         Note that sampling happens only when the amount of untracked memory exceeds the untracked memory limit,
          which is 4 MiB by default but can be lowered if 'total_memory_profiler_step' is lowered.
         You may want to set 'total_memory_profiler_step' to 1 for extra fine grained sampling.
      -->
    <total_memory_tracker_sample_probability>0</total_memory_tracker_sample_probability>

    <!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family.
         In bytes. Cache is single for server. Memory is allocated only on demand.
         Cache is used when 'use_uncompressed_cache' user setting turned on (off by default).
         Uncompressed cache is advantageous only for very short queries and in rare cases.

         Note: uncompressed cache can be pointless for lz4, because memory bandwidth
         is slower than multi-core decompression on some server configurations.
         Enabling it can sometimes paradoxically make queries slower.
      -->
    <uncompressed_cache_size>8589934592</uncompressed_cache_size>

    <!-- Approximate size of mark cache, used in tables of MergeTree family.
         In bytes. Cache is single for server. Memory is allocated only on demand.
         You should not lower this value.
      -->
    <mark_cache_size>5368709120</mark_cache_size>

    <mmap_cache_size>1000</mmap_cache_size>

    <!-- Cache size in bytes for compiled expressions.-->
    <compiled_expression_cache_size>134217728</compiled_expression_cache_size>

    <!-- Cache size in elements for compiled expressions.-->
    <compiled_expression_cache_elements_size>10000</compiled_expression_cache_elements_size>

    <!-- Path to data directory, with trailing slash. -->
    <path>/var/lib/clickhouse/</path>

    <!-- Path to temporary data for processing hard queries. -->
<tmp_path>/var/lib/clickhouse/tmp/</tmp_path>

        <!-- Disable AuthType plaintext_password and no_password for ACL. -->
<allow_plaintext_password>1</allow_plaintext_password>
<allow_no_password>1</allow_no_password>
<allow_implicit_no_password>1</allow_implicit_no_password>

        <!-- When a user does not specify a password type in the CREATE USER query, the default password type is used.
             Accepted values are: 'plaintext_password', 'sha256_password', 'double_sha1_password', 'bcrypt_password'.
          -->
<default_password_type>sha256_password</default_password_type>

        <!-- Work factor for bcrypt_password authentication type-->
<bcrypt_workfactor>12</bcrypt_workfactor>
        <!-- Directory with user provided files that are accessible by 'file' table function. -->
<user_files_path>/var/lib/clickhouse/user_files/</user_files_path>

        <!-- LDAP server definitions. -->
<ldap_servers>
</ldap_servers>

        <!-- Sources to read users, roles, access rights, profiles of settings, quotas. -->
<user_directories>
<users_xml>
    <!-- Path to configuration file with predefined users. -->
    <path>users.xml</path>
</users_xml>
<local_directory>
    <!-- Path to folder where users created by SQL commands are stored. -->
    <path>/var/lib/clickhouse/access/</path>
</local_directory>
</user_directories>

<access_control_improvements>
<!-- Enables logic that users without permissive row policies can still read rows using a SELECT query.
     For example, if there two users A, B and a row policy is defined only for A, then
     if this setting is true the user B will see all rows, and if this setting is false the user B will see no rows.
     By default this setting is false for compatibility with earlier access configurations. -->
<users_without_row_policies_can_read_rows>false</users_without_row_policies_can_read_rows>

<!-- By default, for backward compatibility ON CLUSTER queries ignore CLUSTER grant,
     however you can change this behaviour by setting this to true -->
<on_cluster_queries_require_cluster_grant>false</on_cluster_queries_require_cluster_grant>

<!-- By default, for backward compatibility "SELECT * FROM system.<table>" doesn't require any grants and can be executed
     by any user. You can change this behaviour by setting this to true.
     If it's set to true then this query requires "GRANT SELECT ON system.<table>" just like as for non-system tables.
     Exceptions: a few system tables ("tables", "columns", "databases", and some constant tables like "one", "contributors")
     are still accessible for everyone; and if there is a SHOW privilege (e.g. "SHOW USERS") granted the corresponding system
     table (i.e. "system.users") will be accessible. -->
<select_from_system_db_requires_grant>false</select_from_system_db_requires_grant>

<!-- By default, for backward compatibility "SELECT * FROM information_schema.<table>" doesn't require any grants and can be
     executed by any user. You can change this behaviour by setting this to true.
     If it's set to true then this query requires "GRANT SELECT ON information_schema.<table>" just like as for ordinary tables. -->
<select_from_information_schema_requires_grant>false</select_from_information_schema_requires_grant>

<!-- By default, for backward compatibility a settings profile constraint for a specific setting inherit every not set field from
     previous profile. You can change this behaviour by setting this to true.
     If it's set to true then if settings profile has a constraint for a specific setting, then this constraint completely cancels all
     actions of previous constraint (defined in other profiles) for the same specific setting, including fields that are not set by new constraint.
     It also enables 'changeable_in_readonly' constraint type -->
<settings_constraints_replace_previous>false</settings_constraints_replace_previous>

<!-- Number of seconds since last access a role is stored in the Role Cache -->
<role_cache_expiration_time_seconds>600</role_cache_expiration_time_seconds>
</access_control_improvements>

        <!-- Default profile of settings. -->
<default_profile>default</default_profile>

        <!-- Comma-separated list of prefixes for user-defined settings.
             The server will allow to set these settings, and retrieve them with the getSetting function.
             They are also logged in the query_log, similarly to other settings, but have no special effect.
             The "SQL_" prefix is introduced for compatibility with MySQL - these settings are being set be Tableau.
        -->
<custom_settings_prefixes>SQL_</custom_settings_prefixes>

        <!-- Default database. -->
<default_database>default</default_database>

<mlock_executable>true</mlock_executable>

        <!-- Reallocate memory for machine code ("text") using huge pages. Highly experimental. -->
<remap_executable>false</remap_executable>


        <!-- Configuration of clusters that could be used in Distributed tables.
             https://clickhouse.com/docs/en/operations/table_engines/distributed/
          -->
<remote_servers>
<!-- Test only shard config for testing distributed storage -->
<benchmark_cluster>
    <shard>
        <replica>
            <default_database>benchmark</default_database>
            <host>cloud-41</host>
            <port>9001</port>
            <user>bdspro</user>
            <password>password</password>
        </replica>
    </shard>
    <shard>
        <replica>
            <default_database>benchmark</default_database>
            <host>cloud-42</host>
            <port>9001</port>
            <user>bdspro</user>
            <password>password</password>
        </replica>
    </shard>
    <shard>
        <replica>
            <default_database>benchmark</default_database>
            <host>cloud-43</host>
            <port>9001</port>
            <user>bdspro</user>
            <password>password</password>
        </replica>
    </shard>
</benchmark_cluster>
</remote_servers>


        <!-- ZooKeeper is used to store metadata about replicas, when using Replicated tables.
             Optional. If you don't use replicated tables, you could omit that.

             See https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/replication/
          -->
    <zookeeper>
        <node index="1">
            <host>zookeeper</host>
            <port>2181</port>
        </node>
    </zookeeper>

        <!-- Substitutions for parameters of replicated tables.
              Optional. If you don't use replicated tables, you could omit that.

             See https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/replication/#creating-replicated-tables
          -->
        <!--
        <macros>
            <shard>01</shard>
            <replica>example01-01-1</replica>
        </macros>
        -->


        <!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. -->
<builtin_dictionaries_reload_interval>3600</builtin_dictionaries_reload_interval>


        <!-- Maximum session timeout, in seconds. Default: 3600. -->
<max_session_timeout>3600</max_session_timeout>

        <!-- Default session timeout, in seconds. Default: 60. -->
<default_session_timeout>60</default_session_timeout>

        <!-- Query log. Used only for queries with setting log_queries = 1. -->
<query_log>
<!-- What table to insert data. If table is not exist, it will be created.
     When query log structure is changed after system update,
      then old table will be renamed and new table will be created automatically.
-->
<database>system</database>
<table>query_log</table>
<!--
    PARTITION BY expr: https://clickhouse.com/docs/en/table_engines/mergetree-family/custom_partitioning_key/
    Example:
        event_date
        toMonday(event_date)
        toYYYYMM(event_date)
        toStartOfHour(event_time)
-->
<partition_by>toYYYYMM(event_date)</partition_by>

<!-- Interval of flushing data. -->
<flush_interval_milliseconds>7500</flush_interval_milliseconds>

<!-- example of using a different storage policy for a system table -->
<!-- storage_policy>local_ssd</storage_policy -->
</query_log>

        <!-- Trace log. Stores stack traces collected by query profilers.
             See query_profiler_real_time_period_ns and query_profiler_cpu_time_period_ns settings. -->
<trace_log>
<database>system</database>
<table>trace_log</table>

<partition_by>toYYYYMM(event_date)</partition_by>
<flush_interval_milliseconds>7500</flush_interval_milliseconds>
</trace_log>

        <!-- Query thread log. Has information about all threads participated in query execution.
             Used only for queries with setting log_query_threads = 1. -->
<query_thread_log>
<database>system</database>
<table>query_thread_log</table>
<partition_by>toYYYYMM(event_date)</partition_by>
<flush_interval_milliseconds>7500</flush_interval_milliseconds>
</query_thread_log>

        <!-- Query views log. Has information about all dependent views associated with a query.
             Used only for queries with setting log_query_views = 1. -->
<query_views_log>
<database>system</database>
<table>query_views_log</table>
<partition_by>toYYYYMM(event_date)</partition_by>
<flush_interval_milliseconds>7500</flush_interval_milliseconds>
</query_views_log>

        <!-- Uncomment if use part log.
             Part log contains information about all actions with parts in MergeTree tables (creation, deletion, merges, downloads).-->
<part_log>
<database>system</database>
<table>part_log</table>
<partition_by>toYYYYMM(event_date)</partition_by>
<flush_interval_milliseconds>7500</flush_interval_milliseconds>
</part_log>

        <!-- Uncomment to write text log into table.
             Text log contains all information from usual server log but stores it in structured and efficient way.
             The level of the messages that goes to the table can be limited (<level>), if not specified all messages will go to the table.
        <text_log>
            <database>system</database>
            <table>text_log</table>
            <flush_interval_milliseconds>7500</flush_interval_milliseconds>
            <level></level>
        </text_log>
        -->

        <!-- Metric log contains rows with current values of ProfileEvents, CurrentMetrics collected with "collect_interval_milliseconds" interval. -->
<metric_log>
<database>system</database>
<table>metric_log</table>
<flush_interval_milliseconds>7500</flush_interval_milliseconds>
<collect_interval_milliseconds>1000</collect_interval_milliseconds>
</metric_log>

        <!--
            Asynchronous metric log contains values of metrics from
            system.asynchronous_metrics.
        -->
<asynchronous_metric_log>
<database>system</database>
<table>asynchronous_metric_log</table>
<flush_interval_milliseconds>7000</flush_interval_milliseconds>
</asynchronous_metric_log>

        <!--
            OpenTelemetry log contains OpenTelemetry trace spans.
        -->
<opentelemetry_span_log>
<!--
    The default table creation code is insufficient, this <engine> spec
    is a workaround. There is no 'event_time' for this log, but two times,
    start and finish. It is sorted by finish time, to avoid inserting
    data too far away in the past (probably we can sometimes insert a span
    that is seconds earlier than the last span in the table, due to a race
    between several spans inserted in parallel). This gives the spans a
    global order that we can use to e.g. retry insertion into some external
    system.
-->
<engine>
    engine MergeTree
    partition by toYYYYMM(finish_date)
    order by (finish_date, finish_time_us, trace_id)
</engine>
<database>system</database>
<table>opentelemetry_span_log</table>
<flush_interval_milliseconds>7500</flush_interval_milliseconds>
</opentelemetry_span_log>


        <!-- Crash log. Stores stack traces for fatal errors.
             This table is normally empty. -->
<crash_log>
<database>system</database>
<table>crash_log</table>

<partition_by />
<flush_interval_milliseconds>1000</flush_interval_milliseconds>
</crash_log>

        <!-- Session log. Stores user log in (successful or not) and log out events.

            Note: session log has known security issues and should not be used in production.
        -->
        <!-- <session_log>
            <database>system</database>
            <table>session_log</table>

            <partition_by>toYYYYMM(event_date)</partition_by>
            <flush_interval_milliseconds>7500</flush_interval_milliseconds>
        </session_log> -->

        <!-- Profiling on Processors level. -->
<processors_profile_log>
<database>system</database>
<table>processors_profile_log</table>

<partition_by>toYYYYMM(event_date)</partition_by>
<flush_interval_milliseconds>7500</flush_interval_milliseconds>
</processors_profile_log>

        <!-- Log of asynchronous inserts. It allows to check status
             of insert query in fire-and-forget mode.
        -->
<asynchronous_insert_log>
<database>system</database>
<table>asynchronous_insert_log</table>

<flush_interval_milliseconds>7500</flush_interval_milliseconds>
<partition_by>event_date</partition_by>
<ttl>event_date + INTERVAL 3 DAY</ttl>
</asynchronous_insert_log>

        <!-- <top_level_domains_path>/var/lib/clickhouse/top_level_domains/</top_level_domains_path> -->
        <!-- Custom TLD lists.
             Format: <name>/path/to/file</name>

             Changes will not be applied w/o server restart.
             Path to the list is under top_level_domains_path (see above).
        -->
<top_level_domains_lists>
<!--
<public_suffix_list>/path/to/public_suffix_list.dat</public_suffix_list>
-->
</top_level_domains_lists>

        <!-- Configuration of external dictionaries. See:
             https://clickhouse.com/docs/en/sql-reference/dictionaries/external-dictionaries/external-dicts
        -->
<dictionaries_config>*_dictionary.*ml</dictionaries_config>

        <!-- Configuration of user defined executable functions -->
<user_defined_executable_functions_config>*_function.*ml</user_defined_executable_functions_config>

        <!-- Configuration of encryption. The server executes a command to
             obtain an encryption key at startup if such a command is
             defined, or encryption codecs will be disabled otherwise. The
             command is executed through /bin/sh and is expected to write
             a Base64-encoded key to the stdout. -->
<encryption_codecs>

<!-- /aes_128_gcm_siv -->
</encryption_codecs>

        <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster.
             Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. -->
<distributed_ddl>
<!-- Path in ZooKeeper to queue with DDL queries -->
<path>/clickhouse/task_queue/ddl</path>

<!-- Settings from this profile will be used to execute DDL queries -->
<!-- <profile>default</profile> -->

<!-- Controls how much ON CLUSTER queries can be run simultaneously. -->
<!-- <pool_size>1</pool_size> -->

<!--
     Cleanup settings (active tasks will not be removed)
-->

<!-- Controls task TTL (default 1 week) -->
<!-- <task_max_lifetime>604800</task_max_lifetime> -->

<!-- Controls how often cleanup should be performed (in seconds) -->
<!-- <cleanup_delay_period>60</cleanup_delay_period> -->

<!-- Controls how many tasks could be in the queue -->
<!-- <max_tasks_in_queue>1000</max_tasks_in_queue> -->
</distributed_ddl>

        <!-- Example of parameters for GraphiteMergeTree table engine -->
<graphite_rollup_example>
<pattern>
    <regexp>click_cost</regexp>
    <function>any</function>
    <retention>
        <age>0</age>
        <precision>3600</precision>
    </retention>
    <retention>
        <age>86400</age>
        <precision>60</precision>
    </retention>
</pattern>
<default>
    <function>max</function>
    <retention>
        <age>0</age>
        <precision>60</precision>
    </retention>
    <retention>
        <age>3600</age>
        <precision>300</precision>
    </retention>
    <retention>
        <age>86400</age>
        <precision>3600</precision>
    </retention>
</default>
</graphite_rollup_example>

        <!-- Directory in <clickhouse-path> containing schema files for various input formats.
             The directory will be created if it doesn't exist.
          -->
<format_schema_path>/var/lib/clickhouse/format_schemas/</format_schema_path>

<send_crash_reports>
<!-- Changing <enabled> to true allows sending crash reports to -->
<!-- the ClickHouse core developers team via Sentry https://sentry.io -->
<!-- Doing so at least in pre-production environments is highly appreciated -->
<enabled>false</enabled>
<!-- Change <anonymize> to true if you don't feel comfortable attaching the server hostname to the crash report -->
<anonymize>false</anonymize>
<!-- Default endpoint should be changed to different Sentry DSN only if you have -->
<!-- some in-house engineers or hired consultants who're going to debug ClickHouse issues for you -->
<endpoint>https://6f33034cfe684dd7a3ab9875e57b1c8d@o388870.ingest.sentry.io/5226277</endpoint>
</send_crash_reports>


        <!-- Configuration for the query cache -->
<query_cache>
<max_size_in_bytes>1073741824</max_size_in_bytes>
<max_entries>1024</max_entries>
<max_entry_size_in_bytes>1048576</max_entry_size_in_bytes>
<max_entry_size_in_rows>30000000</max_entry_size_in_rows>
</query_cache>

        </clickhouse>
